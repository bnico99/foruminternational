# Generated by Django 2.2.7 on 2020-01-22 10:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone

# Blocks the 8-16h timeslot for all weekdays in the next 5 years
def block_weekdays(apps, schema_editor):
    from booking.models import Blocker
    from datetime import date, time, timedelta
    from booking.models import get_day_type

    for current_date in (date.today() + timedelta(n) for n in range(5 * 365)):
        if get_day_type(current_date) == 'WEEKDAY':
            b = Blocker(date=current_date, start_time=time(8), duration=8)
            b.save()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user_account', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Bitte wählen Sie ein Datum aus.', verbose_name='Datum')),
                ('start_time', models.TimeField(help_text='Bitte wählen Sie eine Uhrzeit aus.', verbose_name='Beginn')),
                ('duration', models.SmallIntegerField(help_text='Bitte wählen Sie die gewünschte Dauer.', verbose_name='Dauer')),
                ('start_datetime', models.DateTimeField(default='', editable=False)),
                ('end_datetime', models.DateTimeField(default='', editable=False)),
                ('booking_time', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyBooking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='erster Termin')),
                ('end_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='letzter Termin')),
                ('exception_first', models.DateField(blank=True, null=True, verbose_name='Erste Ausnahme')),
                ('exception_second', models.DateField(blank=True, null=True, verbose_name='Zweite Ausnahme')),
                ('exception_third', models.DateField(blank=True, null=True, verbose_name='Dritte Ausnahme')),
                ('exception_forth', models.DateField(blank=True, null=True, verbose_name='Vierte Ausnahme')),
                ('exception_fifth', models.DateField(blank=True, null=True, verbose_name='Fünfte Ausnahme')),
            ],
        ),
        migrations.CreateModel(
            name='Blocker',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='booking.Event')),
            ],
            bases=('booking.event',),
        ),
        migrations.CreateModel(
            name='WaitingList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default='2019-01-01', verbose_name='Datum')),
                ('waiting', models.ManyToManyField(to='user_account.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='CancelledBooking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(default='', editable=False, verbose_name='Startzeit')),
                ('end_datetime', models.DateTimeField(default='', editable=False, verbose_name='Endzeit')),
                ('booking_time', models.DateTimeField(default='', editable=False, verbose_name='Zeitpunkt der Buchung')),
                ('cancellation_time', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Zeitpunkt der Stornierung')),
                ('rent', models.IntegerField(default=0, editable=False, verbose_name='Miete')),
                ('rent_was_paid', models.BooleanField(default=False, editable=False, verbose_name='hat der Kunde die Miete bereits gezahlt')),
                ('rent_has_to_be_paid', models.BooleanField(default=False, editable=False, verbose_name='die Miete muss zurückgezahlt werden')),
                ('rent_paid_back', models.BooleanField(default=False, verbose_name='Rückzahlung der Miete erfolgt')),
                ('author', models.ForeignKey(default=None, editable=False, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='booking.Event')),
                ('student', models.CharField(choices=[('yes', 'JA'), ('no', 'NEIN')], default='', help_text='Bitte geben Sie an, ob Sie Student der UdS oder der HTW sind.', max_length=10, verbose_name='Student (UdS/HTW)')),
                ('number_people', models.SmallIntegerField(help_text='Bitte geben Sie an, wie viele Personen etwa erscheinen werden.   ', verbose_name='Personenzahl')),
                ('refrigerator', models.CharField(choices=[('yes', 'JA'), ('no', 'NEIN')], default='', help_text='Bitte geben Sie an, ob Sie die Kühlschränke des FORUM international benutzen möchten.', max_length=10, verbose_name='Kühlschränke erwünscht?')),
                ('occasion', models.TextField(default='', help_text='Bitte geben Sie einen Anlass an.', max_length=40, verbose_name='Anlass')),
                ('confirmed', models.BooleanField(default=False, verbose_name='Bestätigt')),
                ('rent_paid', models.BooleanField(default=False, verbose_name='Miete bezahlt')),
                ('contract_signed', models.BooleanField(default=False, verbose_name='Vertrag unterschrieben')),
                ('deposit_paid', models.BooleanField(default=False, verbose_name='Kaution gezahlt')),
                ('deposit_refunded', models.BooleanField(default=False, verbose_name='Kaution zurückerstattet')),
                ('requested_inspection', models.BooleanField(default=False, verbose_name='Besichtigung beantragt')),
                ('author', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('booking.event',),
        ),
        migrations.RunPython(block_weekdays),
    ]
